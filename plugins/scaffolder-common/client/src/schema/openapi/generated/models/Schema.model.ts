/*
 * Copyright 2024 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { SchemaAdditionalItems } from '../models/SchemaAdditionalItems.model';
import { SchemaDependenciesValue } from '../models/SchemaDependenciesValue.model';
import { SchemaExclusiveMaximum } from '../models/SchemaExclusiveMaximum.model';
import { SchemaItems } from '../models/SchemaItems.model';
import { SchemaRequired } from '../models/SchemaRequired.model';
import { SchemaType } from '../models/SchemaType.model';

/**
 * @public
 */
export interface Schema {
  [key: string]: any;

  id?: string;
  title?: string;
  description?: string;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: SchemaExclusiveMaximum;
  minimum?: number;
  exclusiveMinimum?: SchemaExclusiveMaximum;
  maxLength?: number;
  minLength?: number;
  pattern?: any;
  additionalItems?: SchemaAdditionalItems;
  items?: SchemaItems;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxProperties?: number;
  minProperties?: number;
  required?: SchemaRequired;
  additionalProperties?: SchemaAdditionalItems;
  definitions?: { [key: string]: Schema };
  properties?: { [key: string]: Schema };
  patternProperties?: { [key: string]: Schema };
  dependencies?: { [key: string]: SchemaDependenciesValue };
  type?: SchemaType;
  format?: string;
  allOf?: Array<Schema>;
  anyOf?: Array<Schema>;
  oneOf?: Array<Schema>;
  not?: Schema;
  then?: Schema;
}
