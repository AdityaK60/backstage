openapi: 3.0.3
info:
  title: scaffolder
  version: '1'
  description: The Backstage backend plugin that helps you create new things
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact: {}
servers:
  - url: /
components:
  examples: {}
  headers: {}
  parameters:
    kind:
      name: kind
      in: path
      required: true
      allowReserved: true
      schema:
        type: string
    namespace:
      name: namespace
      in: path
      required: true
      allowReserved: true
      schema:
        type: string
    name:
      name: name
      in: path
      required: true
      allowReserved: true
      schema:
        type: string
    taskId:
      name: taskId
      in: path
      required: true
      allowReserved: true
      schema:
        type: string
  requestBodies: {}
  responses:
    ErrorResponse:
      description: An error response from the backend.
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation errors.
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: array
                      items:
                        oneOf:
                          - type: string
                          - type: integer
                    property:
                      type: string
                    schema:
                      $ref: '#/components/schemas/Schema'
                    stack:
                      type: string
                    instance:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                        - type: object
                      nullable: true
                    argument:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
                        - type: array
                        - type: object
                      nullable: true
                    name:
                      type: string
                    message:
                      type: string
                  required:
                    - path
                    - property
                    - schema
                    - instance
                    - name
                    - message
                    - argument
                    - stack
                  additionalProperties: {}
            required:
              - errors
  schemas:
    Action:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        examples:
          type: array
          items:
            $ref: '#/components/schemas/ActionExample'
        schema:
          type: object
          properties:
            input:
              $ref: '#/components/schemas/JsonObject'
            output:
              $ref: '#/components/schemas/JsonObject'
      required:
        - id
      description: The response shape for a single action in the `listActions` call to the `scaffolder-backend`
    ActionExample:
      type: object
      properties:
        description:
          type: string
        example:
          type: string
      required:
        - description
        - example
      description: A single action example
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            name:
              type: string
            message:
              type: string
            stack:
              type: string
            code:
              type: string
          required:
            - name
            - message
        request:
          type: object
          properties:
            method:
              type: string
            url:
              type: string
          required:
            - method
            - url
        response:
          type: object
          properties:
            statusCode:
              type: number
          required:
            - statusCode
      required:
        - error
        - response
      additionalProperties: {}
    JsonArray:
      type: array
      items:
        $ref: '#/components/schemas/JsonValue'
      description: A type representing all allowed JSON array values.
    JsonObject:
      type: object
      properties: {}
      description: A type representing all allowed JSON object values.
      additionalProperties: {}
    JsonPrimitive:
      oneOf:
        - type: number
        - type: string
        - type: boolean
        - type: null
      description: A type representing all allowed JSON primitive values.
    JsonValue:
      oneOf:
        - $ref: '#/components/schemas/JsonObject'
        - $ref: '#/components/schemas/JsonArray'
        - $ref: '#/components/schemas/JsonPrimitive'
      description: A type representing all allowed JSON values.
    ListActionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Action'
      description: The response shape for the `listActions` call to the `scaffolder-backend`
    ListTasksResponse:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/SerializedTask'
      description: The response shape for the `listTasks` call to the `scaffolder-backend`
    ScaffolderScaffoldOptions:
      type: object
      properties:
        templateRef:
          type: string
        values:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonValue'
        secrets:
          type: object
          additionalProperties:
            type: string
      required:
        - templateRef
        - values
      description: The input options to the `scaffold` method of the `ScaffolderClient`.
    Schema:
      type: object
      properties:
        $id:
          type: string
        id:
          type: string
        $schema:
          type: string
        $ref:
          type: string
        title:
          type: string
        description:
          type: string
        multipleOf:
          type: number
        maximum:
          type: number
        exclusiveMaximum:
          oneOf:
            - type: number
            - type: boolean
        minimum:
          type: number
        exclusiveMinimum:
          oneOf:
            - type: number
            - type: boolean
        maxLength:
          type: integer
        minLength:
          type: integer
        pattern:
          type: string
        additionalItems:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/Schema'
        items:
          oneOf:
            - $ref: '#/components/schemas/Schema'
            - type: array
              items:
                $ref: '#/components/schemas/Schema'
        maxItems:
          type: integer
        minItems:
          type: integer
        uniqueItems:
          type: boolean
        maxProperties:
          type: integer
        minProperties:
          type: integer
        required:
          oneOf:
            - type: array
              items:
                type: string
            - type: boolean
        additionalProperties:
          oneOf:
            - type: boolean
            - $ref: '#/components/schemas/Schema'
        definitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Schema'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Schema'
        patternProperties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Schema'
        dependencies:
          type: object
          additionalProperties:
            oneOf:
              - $ref: '#/components/schemas/Schema'
              - type: array
                items:
                  type: string
        const:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
            - type: object
          nullable: true
        enum:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
              - type: boolean
              - type: array
              - type: object
            nullable: true
        type:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        format:
          type: string
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
        anyOf:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
        oneOf:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
        not:
          $ref: '#/components/schemas/Schema'
        if:
          $ref: '#/components/schemas/Schema'
        then:
          $ref: '#/components/schemas/Schema'
        else:
          $ref: '#/components/schemas/Schema'
    SerializedTask:
      type: object
      properties:
        id:
          type: string
        spec:
          $ref: '#/components/schemas/TaskSpec'
        status:
          $ref: '#/components/schemas/TaskStatus'
        createdAt:
          type: string
        lastHeartbeatAt:
          type: string
        createdBy:
          type: string
        secrets:
          $ref: '#/components/schemas/TaskSecrets'
        state:
          $ref: '#/components/schemas/JsonObject'
      required:
        - id
        - spec
        - status
        - createdAt
      description: SerializedTask
    TaskRecovery:
      type: object
      properties:
        EXPERIMENTAL_strategy:
          $ref: '#/components/schemas/TaskRecoverStrategy'
      description: |-
        When task didn't have a chance to complete due to system restart you can define the strategy what to do with such tasks,
        by defining a strategy.

        By default, it is none, what means to not recover but updating the status from 'processing' to 'failed'.
    TaskRecoverStrategy:
      type: string
      description: |
        - none: not recover, let the task be marked as failed
        - startOver: do recover, start the execution of the task from the first step.
      enum:
        - none
        - startOver
    TaskSecrets:
      type: object
      properties:
        backstageToken:
          type: string
      additionalProperties:
        type: string
      description: TaskSecrets
    TaskSpec:
      $ref: '#/components/schemas/TaskSpecV1beta3'
    TaskSpecV1beta3:
      type: object
      properties:
        apiVersion:
          type: string
          enum:
            - "scaffolder.backstage.io/v1beta3"
          description: The apiVersion string of the TaskSpec.
        parameters:
          $ref: '#/components/schemas/JsonObject'
          description: |
            This is a JSONSchema which is used to render a form in the frontend
            to collect user input and validate it against that schema. This can then be used in the `steps` part below to template
            variables passed from the user into each action in the template.
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TaskStep'
          description: |
            A list of steps to be executed in sequence which are defined by the template. These steps are a list of the underlying
            javascript action and some optional input parameters that may or may not have been collected from the end user.
        output:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonValue'
          description: |
            The output is an object where template authors can pull out information from template actions and return them in a known standard way.
        templateInfo:
          $ref: '#/components/schemas/TemplateInfo'
          description: Some information about the template that is stored on the task spec.
        user:
          type: object
          properties:
            entity:
              $ref: '../../../catalog-backend/src/schema/openapi.yaml#/components/schemas/UserEntity'
              description: The decorated entity from the Catalog
            ref:
              type: string
              description: An entity ref for the author of the task
          description: Some decoration of the author of the task that should be available in the context
        EXPERIMENTAL_recovery:
          $ref: '#/components/schemas/TaskRecovery'
          description: How to recover the task after system restart or system crash.
      required:
        - apiVersion
        - parameters
        - steps
        - output
      description: |-
        A scaffolder task as stored in the database, generated from a v1beta3
        apiVersion Template.
    TaskStatus:
      type: string
      enum:
        - 'cancelled'
        - 'completed'
        - 'failed'
        - 'open'
        - 'processing'
      description: The status of each step of the Task
    TaskStep:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this step.
        name:
          type: string
          description: A display name to show the user.
        action:
          type: string
          description: The underlying action ID that will be called as part of running this step.
        input:
          $ref: '#/components/schemas/JsonObject'
          description: Additional data that will be passed to the action.
        if:
          oneOf:
            - type: string
            - type: boolean
          description: When this is false, or if the templated value string evaluates to something that is falsy the step will be skipped.
        each:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/JsonArray'
          description: Run step repeatedly.
      required:
        - id
        - name
        - action
      description: An individual step of a scaffolder task, as stored in the database.
    TemplateInfo:
      type: object
      properties:
        entityRef:
          type: string
          description: The entityRef of the template.
        baseUrl:
          type: string
          description: Where the template is stored, so we can resolve relative paths for things like `fetch:template` paths.
        entity:
          type: object
          description: The Template entity.
          properties:
            metadata:
              $ref: '../../../catalog-backend/src/schema/openapi.yaml#/components/schemas/EntityMeta'
              description: The metadata of the Template.
      required:
        - entityRef
      description: |-
        Information about a template that is stored on a task specification.
        Includes a stringified entityRef, and the baseUrl which is usually the relative path of the template definition
    TemplateParameterSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        presentation:
          $ref: '#/components/schemas/TemplatePresentationV1beta3'
        steps:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              schema:
                $ref: '#/components/schemas/JsonObject'
            required:
              - title
              - schema
      required:
        - title
        - steps
      description: |-
        The shape of each entry of parameters which gets rendered
        as a separate step in the wizard input
    TemplatePresentationV1beta3:
      type: object
      properties:
        buttonLabels:
          type: object
          properties:
            backButtonText:
              type: string
              description: The text for the button which leads to the previous template page
            createButtonText:
              type: string
              description: The text for the button which starts the execution of the template
            reviewButtonText:
              type: string
              description: The text for the button which opens template's review/summary
          description: Overrides default buttons' text
          additionalProperties: false
      description: The presentation of the template.
      additionalProperties: {}
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /v2/templates/{namespace}/{kind}/{name}/parameter-schema:
    get:
      operationId: GetTemplateParameterSchema
      description: Get template parameter schema.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateParameterSchema'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'
      security:
        - {}
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/namespace'
        - $ref: '#/components/parameters/kind'
        - $ref: '#/components/parameters/name'

  /v2/actions:
    get:
      operationId: ListActions
      description: Returns a list of all installed actions.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActionsResponse'
      security:
        - {}
        - JWT: []
      parameters: []

  /v2/tasks:
    get:
      operationId: ListTasks
      description: Returns a list of tasks, filtering by ownership and/or status if given.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasksResponse'
      security:
        - {}
        - JWT: []
      parameters: []
    post:
      operationId: Scaffold
      description: |-
        Executes the scaffolding of a component, given a template and its
        parameter values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaffolderScaffoldOptions'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
      security:
        - {}
        - JWT: []
      parameters: []

  /v2/tasks/{taskId}:
    get:
      operationId: GetTask
      description: Get a task by ID.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SerializedTask'
      security:
        - {}
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/taskId'

  /v2/tasks/{taskId}/cancel:
    post:
      operationId: CancelTask
      description: Sends a signal to a task broker to cancel the running task by taskId.
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/TaskStatus'
      security:
        - {}
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/taskId'

  /v2/tasks/{taskId}/retry:
    post:
      operationId: Retry
      description: Starts the task again from the point where it failed.
      responses:
        '201':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
      security:
        - {}
        - JWT: []
      parameters:
        - $ref: '#/components/parameters/taskId'

  /v2/tasks/{taskId}/eventstream:
    get:
      operationId: StreamLogsEventStream
      description: Get event stream for a task by ID.
      responses:
        '200':
          description: Ok
          content:
            text/event-stream:
              schema:
                type: string
      parameters:
        - $ref: '#/components/parameters/taskId'
        - name: after
          in: query
          description: Offset event ID to stream events after.
          schema:
            type: integer
